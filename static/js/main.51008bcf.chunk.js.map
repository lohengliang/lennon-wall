{"version":3,"sources":["actions/index.js","reducers/postsByWall.js","reducers/index.js","configureStore.js","components/Posts.js","containers/AddPost.js","containers/AsyncApp.js","containers/Root.js","index.js"],"names":["fetchPosts","wallName","dispatch","type","wall","fetch","then","response","json","posts","receivePosts","initialState","postsByWall","state","action","combineReducers","loggerMiddleware","createLogger","Posts","this","props","map","post","i","key","value","Component","connect","input","onSubmit","e","preventDefault","trim","method","headers","body","JSON","stringify","addPost","ref","node","AsyncApp","preloadedState","ownProps","match","params","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","Root","basename","process","path","component","render","document","getElementById"],"mappings":"+sEAkBO,SAASA,EAAWC,GACzB,OAAO,SAAAC,GAEL,OADAA,EAbK,CACLC,KANyB,gBAOzBC,KAWsBH,IACfI,IAAM,sEAAD,OAC4DJ,IAErEK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIN,EAbpB,SAAsBE,EAAMI,GAC1B,MAAO,CACLL,KAXyB,gBAYzBM,MAAOD,GAUkBE,CAAaT,EAAUO,QCvBpD,IAAMG,EAAe,CACnBF,MAAO,IAiBMG,EAdK,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACpD,OAAQA,EAAOX,MACb,IDLyB,gBCMvB,OAAO,eACFU,EADL,CAEEJ,MAAOK,EAAOL,QAElB,IDXyB,gBCazB,QACE,OAAOI,ICbEE,cAAgB,CAC7BH,gBCCII,EAAmBC,yB,ICHJC,E,iLAEjB,OACE,4BACGC,KAAKC,MAAMX,MAAMY,KAAI,SAACC,EAAMC,GAAP,OACpB,wBAAIC,IAAKD,GAAID,EAAKG,e,GALOC,aCuBpBC,iBArBC,SAAC,GAA4B,IACvCC,EADa3B,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAE3B,OACE,6BACE,0BACE2B,SAAU,SAAAC,GACRA,EAAEC,iBACGH,EAAMH,MAAMO,SAGjB9B,ELcH,SAAiBD,EAAUwB,GAChC,OAAO,SAAAvB,GACL,OAAOG,IAAM,0DAA2D,CACtE4B,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBZ,QACAxB,eAGDK,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAgB,GACJ,OAAOpB,EAASF,EAAWC,QK9BhBqC,CAAQrC,EAAU2B,EAAMH,QACjCG,EAAMH,MAAQ,MAGhB,2BAAOc,IAAK,SAAAC,GAAI,OAAKZ,EAAQY,KAC7B,4BAAQrC,KAAK,UAAb,iBCZFsC,E,4LACiB,IAAD,EACatB,KAAKC,MAA5BnB,EADU,EACVA,UACRC,EAFkB,EACAA,UACTF,EAAWC,GAAY,W,+BAExB,IAAD,EACqBkB,KAAKC,MAAzBnB,EADD,EACCA,SAAUQ,EADX,EACWA,MAClB,OACE,6BACE,kBAAC,EAAD,CAASR,SAAUA,GAAY,SAC/B,kBAAC,EAAD,CAAOQ,MAAOA,S,GAVCiB,aAwBRC,IHxBwBe,EGwBxBf,eALf,SAAyBd,EAAO8B,GAC9B,IAAMlC,EAAQI,EAAMD,YAAYH,MAEhC,MAAO,CAAER,SADM0C,EAASC,MAAMC,OAAOzC,KAClBK,WAENkB,CAAyBc,GCzBlCK,EJEGC,YACLC,EACAN,EACAO,YAAgBC,IAAiBlC,IIHhBmC,E,iLAEjB,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,CAAQM,SAAUC,gBAChB,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWd,U,GALTf,aCFlC8B,iBAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.51008bcf.chunk.js","sourcesContent":["import fetch from \"cross-fetch\";\r\n\r\nexport const REQUEST_POSTS = \"REQUEST_POSTS\";\r\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\r\nexport const ADD_POSTS = \"ADD_POSTS\";\r\n\r\nfunction requestPosts(wall) {\r\n  return {\r\n    type: REQUEST_POSTS,\r\n    wall\r\n  };\r\n}\r\nfunction receivePosts(wall, json) {\r\n  return {\r\n    type: RECEIVE_POSTS,\r\n    posts: json\r\n  };\r\n}\r\nexport function fetchPosts(wallName) {\r\n  return dispatch => {\r\n    dispatch(requestPosts(wallName));\r\n    return fetch(\r\n      `https://lit-brushlands-30026.herokuapp.com/posts/retrieve?wallName=${wallName}`\r\n    )\r\n      .then(response => response.json())\r\n      .then(json => dispatch(receivePosts(wallName, json)));\r\n  };\r\n}\r\nexport function addPost(wallName, value) {\r\n  return dispatch => {\r\n    return fetch(\"https://lit-brushlands-30026.herokuapp.com/posts/create\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        value,\r\n        wallName\r\n      })\r\n    })\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(post => {\r\n        return dispatch(fetchPosts(wallName));\r\n      });\r\n  };\r\n}\r\n","import { RECEIVE_POSTS, REQUEST_POSTS } from \"../actions\";\r\n\r\nconst initialState = {\r\n  posts: []\r\n};\r\n\r\nconst postsByWall = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case RECEIVE_POSTS:\r\n      return {\r\n        ...state,\r\n        posts: action.posts\r\n      };\r\n    case REQUEST_POSTS:\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postsByWall;\r\n","import { combineReducers } from \"redux\";\r\nimport postsByWall from \"./postsByWall\";\r\n\r\nexport default combineReducers({\r\n  postsByWall\r\n});\r\n","import { applyMiddleware, createStore } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger()\r\n\r\nexport default function configureStore(preloadedState) {\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n  )\r\n}","import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nexport default class Posts extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.posts.map((post, i) => (\r\n          <li key={i}>{post.value}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nPosts.propTypes = {\r\n  posts: PropTypes.array.isRequired\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addPost } from \"../actions\";\r\n\r\nconst AddPost = ({ wallName, dispatch }) => {\r\n  let input;\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          if (!input.value.trim()) {\r\n            return;\r\n          }\r\n          dispatch(addPost(wallName, input.value));\r\n          input.value = \"\";\r\n        }}\r\n      >\r\n        <input ref={node => (input = node)} />\r\n        <button type=\"submit\">Add Post</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect()(AddPost);\r\n","import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPosts } from \"../actions\";\r\nimport Posts from \"../components/Posts\";\r\nimport AddPost from \"./AddPost\";\r\n\r\nclass AsyncApp extends Component {\r\n  componentDidMount() {\r\n    const { wallName, dispatch } = this.props;\r\n    dispatch(fetchPosts(wallName || \"wall\"));\r\n  }\r\n  render() {\r\n    const { wallName, posts } = this.props;\r\n    return (\r\n      <div>\r\n        <AddPost wallName={wallName || \"wall\"} />\r\n        <Posts posts={posts} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nAsyncApp.propTypes = {\r\n  posts: PropTypes.array.isRequired,\r\n  dispatch: PropTypes.func.isRequired\r\n};\r\nfunction mapStateToProps(state, ownProps) {\r\n  const posts = state.postsByWall.posts;\r\n  var wallName = ownProps.match.params.wall;\r\n  return { wallName, posts };\r\n}\r\nexport default connect(mapStateToProps)(AsyncApp);\r\n","import React, { Component } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport configureStore from \"../configureStore.js\";\r\nimport AsyncApp from \"./AsyncApp.js\";\r\n\r\nconst store = configureStore();\r\n\r\nexport default class Root extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Route path=\"/:wall?\" component={AsyncApp} />\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n","import 'core-js'\r\nimport React from 'react'\r\nimport { render } from 'react-dom'\r\nimport 'regenerator-runtime'\r\nimport Root from './containers/Root'\r\n\r\nrender(<Root />, document.getElementById('root'))"],"sourceRoot":""}